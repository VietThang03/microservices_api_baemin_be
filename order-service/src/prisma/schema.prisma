generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model food_categories {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @default("")
  foods       foods[]
}

model foods {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  image_url       String           @default("") @db.VarChar(255)
  description     String?
  price           Decimal          @db.Decimal(10, 2)
  stock           Int?             @default(0)
  category_id     Int?
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  food_categories food_categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  inventory       inventory[]
  order_items     order_items[]
}

model inventory {
  id           Int       @id @default(autoincrement())
  food_id      Int? @unique
  quantity     Int
  last_updated DateTime? @default(now()) @db.Timestamp(6)
  foods        foods?    @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order_items {
  id       Int     @id @default(autoincrement())
  order_id Int? @unique
  food_id  Int?
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  foods    foods?  @relation(fields: [food_id], references: [id], onUpdate: NoAction)
  orders   orders? @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id          Int           @id @default(autoincrement())
  user_id     Int?
  status      String?       @default("pending") @db.VarChar(20)
  total_price Decimal       @db.Decimal(10, 2)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  users       users?        @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    Int
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(50)
  password       String           @db.VarChar(255)
  email          String           @unique @db.VarChar(100)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  avatar         String?          @default("") @db.VarChar(255)
  orders         orders[]
  refresh_tokens refresh_tokens[]
}
